[manifest]
version = "1.0.0"
dump_lua = true
priority = 214748364

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].level - 1), 1)
G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)
'''
position = "at"
payload = ''' 
G.GAME.hands[hand].mult = math.max(1, G.GAME.hands[hand].mult + (G.GAME.hands[hand].l_mult * amount))
G.GAME.hands[hand].chips = math.max(0, G.GAME.hands[hand].chips + (G.GAME.hands[hand].l_chips * amount))
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:is_suit(suit, bypass_debuff, flush_calc)"
position = "after" 
match_indent = true
payload = '''
if G.jokers then
    local jack_joker = next(SMODS.find_card('j_aij_jack_of_all_trades')) 
    if jack_joker and self.base and self.base.value == 'Jack' then
        return true
    end
    local glass_joker = next(SMODS.find_card('j_aij_stained_glass_joker'))
    local enhancements = SMODS.get_enhancements(self)
    if glass_joker and enhancements['m_glass'] then
        return true
    end
end
'''

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})"
position = "before"
match_indent = true
payload = '''
SMODS.calculate_context({
    entering_shop = true,
})
'''

# blue seals can work with moons
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
function Card:get_end_of_round_effect(context)
    local ret = {}
    local h_dollars = self:get_h_dollars()
    if h_dollars ~= 0 then
        ret.h_dollars = h_dollars
        ret.card = self
    end
    if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit and not self.ability.extra_enhancement then
        local card_type = 'Planet'
        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
        G.E_MANAGER:add_event(Event({
            trigger = 'before',
            delay = 0.0,
            func = (function()
                if G.GAME.last_hand_played then
                    local _planet = 0
                    for k, v in pairs(G.P_CENTER_POOLS.Planet) do
                        if v.config.hand_type == G.GAME.last_hand_played then
                            _planet = v.key
                        end
                    end
                    local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')
                    card:add_to_deck()
                    G.consumeables:emplace(card)
                    G.GAME.consumeable_buffer = 0
                end
                return true
            end)}))
        card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_plus_planet'), colour = G.C.SECONDARY_SET.Planet})
        ret.effect = true
    end
    return ret
end
'''
position = "at"
match_indent = false
payload = '''

function Card:get_end_of_round_effect(context)
    if self.debuff then return {} end
    local ret = {}
    if self.ability.h_dollars > 0 then
        ret.h_dollars = self.ability.h_dollars
        ret.card = self
    end
    if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
        local card_type = 'Planet'
        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
        G.E_MANAGER:add_event(Event({
            trigger = 'before',
            delay = 0.0,
            func = (function()
                if G.GAME.last_hand_played then
                    local _planet = 0
                    for k, v in pairs(G.P_CENTER_POOLS.Planet) do
                        if v.config.hand_type == G.GAME.last_hand_played and not v.config.moon then
                            _planet = v.key
                        end
                    end
                    local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')
                    card:add_to_deck()
                    G.consumeables:emplace(card)
                    G.GAME.consumeable_buffer = 0
                end
                return true
            end)}))
        card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_plus_planet'), colour = G.C.SECONDARY_SET.Planet})
        ret.effect = true
    end
    return ret
end
'''
#planets that aren't in this list are 3x 
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''center = pseudorandom_element(_pool, pseudoseed(_pool_key))'''
position = "before"
match_indent = true
payload = '''
        if _type == 'Planet' then
            local boosted_planet_keys = {
                ['c_mercury'] = true, ['c_venus'] = true, ['c_earth'] = true,
                ['c_mars'] = true,    ['c_jupiter'] = true,['c_saturn'] = true,
                ['c_uranus'] = true,  ['c_neptune'] = true,['c_planet_x'] = true,
                ['c_ceres'] = true, ['c_eris'] = true, ['c_aij_vulcanoid'] = true, 
                ['c_aij_phaethon'] = true, ['c_aij_zoozve'] = true, ['c_aij_2013_nd15'] = true, 
                ['c_aij_luna'] = true, ['c_aij_kamooalewa'] = true, ['c_aij_phobos'] = true, 
                ['c_aij_deimos'] = true, ['c_aij_europa'] = true, ['c_aij_callisto'] = true, 
                ['c_aij_titan'] = true, ['c_aij_iapetus'] = true, ['c_aij_umbriel'] = true, 
                ['c_aij_oberon'] = true, ['c_aij_triton'] = true, ['c_aij_proteus'] = true, 
                ['c_aij_nix'] = true, ['c_aij_charon'] = true, ['c_aij_planet_nine'] = true, 
                ['c_aij_nibiru'] = true, ['c_aij_pallas'] = true, ['c_aij_2000_eu16'] = true, 
                ['c_aij_dysnomia'] = true, ['c_aij_kuiper'] = true, ['c_paperback_quaoar'] = true,
                ['c_paperback_haumea'] = true, ['c_paperback_sedna'] = true, ['c_paperback_makemake'] = true,
                ['c_aij_paper_weywot'] = true, ['c_aij_paper_namaka'] = true, ['c_aij_paper_ilmare'] = true,
                ['c_aij_paper_salacia'] = true, ['c_aij_paper_ixion'] = true, ['c_aij_paper_hiiaka'] = true,
                ['c_aij_paper_varda'] = true, ['c_aij_paper_mk2'] = true,
               
            }
            local weighted_pool = {}
            if _pool and #_pool > 0 then 
                for i = 1, #_pool do
                    local item = _pool[i] 
                    local item_key = nil
                    if type(item) == 'string' then
                        item_key = item
                    elseif type(item) == 'table' and item.key then 
                        item_key = item.key
                    end

                    if item_key then
                        local weight = 3
                        if boosted_planet_keys[item_key] then
                            weight = 1 
                        end
                        -- Add the original item key from the pool 'weight' times
                        for w = 1, weight do
                            table.insert(weighted_pool, item_key) 
                        end
                    else
                         -- Fallback if we somehow can't determine the key
                         table.insert(weighted_pool, item)
                    end
                end
                
                if #weighted_pool > 0 then 
                    _pool = weighted_pool
                end
            end
        end
'''
